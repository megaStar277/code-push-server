#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs');
var path   = require('path');
var _   = require('lodash');
var mysql = require('mysql2');
var Promise = require("bluebird");
var common = require("../core/utils/common");
console.log(common.validatorVersion('^1.2.3'));
return;
var yargs = require('yargs')
    .usage('Usage: $0 <command> [options]')
    .command('init', '初始化数据库', {
      dbpassword: {
        alias: 'dbpassword',
        type: 'string'
      }
    })
    .command('upgrade', '升级数据库', {
      dbpassword: {
        alias: 'dbpassword',
        type: 'string'
      }
    })
    .example('$0 init --dbname codepush --dbhost localhost --dbuser root --dbpassword 123456 --dbport 3306 --force', '初始化code-push-server数据库')
    .example('$0 upgrade --dbname codepush --dbhost localhost --dbuser root --dbpassword 123456 --dbport 3306', '升级code-push-server数据库')
    .default({dbname: 'codepush', dbhost: 'localhost', dbuser: 'root', dbpassword: null})
    .help('h')
    .alias('h', 'help');
var argv = yargs.argv;
var command = argv._[0];
var dbname = argv.dbname ? argv.dbname : 'codepush';
var dbhost = argv.dbhost ? argv.dbhost : 'localhost';
var dbuser = argv.dbuser ? argv.dbuser : 'root';
var dbport = argv.dbport ? argv.dbport : 3306;
var dbpassword = argv.dbpassword;

if (command === 'init') {
    var connection2;
    var connection = mysql.createConnection({
        host: dbhost,
        user: dbuser,
        password: dbpassword,
        port: dbport
    });
    var createDatabaseSql = argv.force ? `CREATE DATABASE IF NOT EXISTS ${dbname}` :
        `CREATE DATABASE ${dbname}`;
    Promise.promisifyAll(connection);
    connection.connect();
    connection.queryAsync(createDatabaseSql)
    .then(function(){
        connection2 = mysql.createConnection({
            host: dbhost,
            user: dbuser,
            password: dbpassword,
            database: dbname,
            multipleStatements: true,
            port: dbport
        });
        connection2.connect();
        Promise.promisifyAll(connection2);
        return connection2;
    })
    .then(function(connection2){
        var sql = fs.readFileSync(path.resolve(__dirname, '../sql/codepush-all.sql'), 'utf-8');
        return connection2.queryAsync(sql);
    })
    .then(function(){
        console.log('success.');
    })
    .catch(function(e){
        console.log(e);
    })
    .finally(function(){
        if(connection) connection.end();
        if(connection2) connection2.end()
    });
} else if (command == 'upgrade'){
    var connection = mysql.createConnection({
        host: dbhost,
        user: dbuser,
        password: dbpassword,
        database: dbname,
        multipleStatements: true,
        port: dbport
    });
    Promise.promisifyAll(connection);
    connection.connect();
    return Promise.coroutine(function*(val){
        var version_no = '0.0.1';
        try {
            var rs = yield connection.queryAsync('select `version` from `versions` where `type`=1 limit 1');
            version_no = _.get(rs,'0.version', '0.0.1');
        } catch (e) {
        }
        if (version_no == '0.4.0') {
            console.log('Everything up-to-date.');
            process.exit(0);
        }
        var allSqlFile = [
            {version:'0.2.14', 'path':path.resolve(__dirname, '../sql/codepush-v0.2.14-patch.sql')},
            {version:'0.2.15', 'path':path.resolve(__dirname, '../sql/codepush-v0.2.15-patch.sql')},
            {version:'0.3.0', 'path':path.resolve(__dirname, '../sql/codepush-v0.3.0-patch.sql')},
            {version:'0.4.0', 'path':path.resolve(__dirname, '../sql/codepush-v0.4.0-patch.sql')}
        ];
        for (var i = 0; i < allSqlFile.length; i++) {
            if(!_.gt(allSqlFile[i]['version'], version_no)) {
                continue;
            }
            var sql = fs.readFileSync(allSqlFile[i]['path'], 'utf-8');
            yield connection.queryAsync(sql);
        }
    })()
    .then(function(){
        console.log('Upgrade success.');
    })
    .catch(function(e){
        console.error(e);
    })
    .finally(function(){
        if(connection) connection.end();
    });
} else {
    yargs.showHelp();
}
