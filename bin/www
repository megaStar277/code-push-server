#!/usr/bin/env node

/**
 * Module dependencies.
 */

var log4js = require('log4js');
var http = require('http');
var validator = require('validator')
var _ = require('lodash')
var config = require('../core/config');
var constConfig = require('../core/const');
log4js.configure(_.get(config, 'log4js', {
    appenders: {console: { type: 'console'}},
    categories : { default: { appenders: ['console'], level: 'info' }}
}));
var log = log4js.getLogger("startup")

var app = require('../app');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
log.debug('port '+ port);

var host = null;
if (process.env.HOST) {
  log.debug('process.env.HOST '+ process.env.HOST);
  if (validator.isIP(process.env.HOST)) {
      log.trace(process.env.HOST + ' valid');
      host = process.env.HOST;
  } else {
    log.warn('process.env.HOST '+ process.env.HOST + ' invalid, use 0.0.0.0 instead');
  }
}
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
var models = require('../models');
models.Versions.findOne({where:{type:1}})
.then(function(v){
    if (!v || v.get('version') != constConfig.CURRENT_DB_VERSION) {
        throw new Error('Please upgrade your database. usage `npm run upgrade` or `code-push-server-db upgrade`');
    }
    server.listen(port, host);
    server.on('error', onError);
    server.on('listening', onListening);
    return;
})
.catch(function(e){
    if (_.startsWith(e.message, 'ER_NO_SUCH_TABLE')) {
        log.error(new Error(`Please upgrade your database. usage bin/db upgrade or code-push-server-db upgrade`));
    } else {
        log.error(e);
    }
    process.exit(1);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      log.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  log.info('Listening on ' + bind);
}
